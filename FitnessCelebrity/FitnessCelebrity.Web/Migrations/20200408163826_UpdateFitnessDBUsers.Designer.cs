// <auto-generated />
using System;
using FitnessCelebrity.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitnessCelebrity.Web.Migrations
{
    [DbContext(typeof(FitnessDbContext))]
    [Migration("20200408163826_UpdateFitnessDBUsers")]
    partial class UpdateFitnessDBUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FitnessCelebrity.Web.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("FitnessCelebrity.Web.Models.FitnessPath", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.ToTable("FitnessPaths");
                });

            modelBuilder.Entity("FitnessCelebrity.Web.Models.FitnessPathWorkout", b =>
                {
                    b.Property<long>("FitnessPathId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkoutId")
                        .HasColumnType("bigint");

                    b.HasKey("FitnessPathId", "WorkoutId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("FitnessPathWorkouts");
                });

            modelBuilder.Entity("FitnessCelebrity.Web.Models.Movement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("FitnessCelebrity.Web.Models.Workout", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("FitnessCelebrity.Web.Models.WorkoutMovement", b =>
                {
                    b.Property<long>("WorkoutId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovementId")
                        .HasColumnType("bigint");

                    b.HasKey("WorkoutId", "MovementId");

                    b.HasIndex("MovementId");

                    b.ToTable("WorkoutMovements");
                });

            modelBuilder.Entity("FitnessCelebrity.Web.Models.FitnessPath", b =>
                {
                    b.HasOne("FitnessCelebrity.Web.Models.ApplicationUser", "User")
                        .WithMany("FitnessPaths")
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("FitnessCelebrity.Web.Models.FitnessPathWorkout", b =>
                {
                    b.HasOne("FitnessCelebrity.Web.Models.FitnessPath", "FitnessPath")
                        .WithMany("FitnessPathWorkouts")
                        .HasForeignKey("FitnessPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessCelebrity.Web.Models.Workout", "Workout")
                        .WithMany("FitnessPathWorkouts")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessCelebrity.Web.Models.Movement", b =>
                {
                    b.HasOne("FitnessCelebrity.Web.Models.ApplicationUser", "User")
                        .WithMany("Movements")
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("FitnessCelebrity.Web.Models.Workout", b =>
                {
                    b.HasOne("FitnessCelebrity.Web.Models.ApplicationUser", "User")
                        .WithMany("Workouts")
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("FitnessCelebrity.Web.Models.WorkoutMovement", b =>
                {
                    b.HasOne("FitnessCelebrity.Web.Models.Movement", "Movement")
                        .WithMany("WorkoutMovements")
                        .HasForeignKey("MovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessCelebrity.Web.Models.Workout", "Workout")
                        .WithMany("WorkoutMovements")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
